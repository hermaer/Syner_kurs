"""
Задание №2
В Урок №10. Задание №1 
вы создавали словарь с информацией о питомце. Теперь нам нужна "настоящая" база данных для ветеринарной клиники.
Подробный требуемый функционал будет ниже. Пока что справка:
Создайте функцию create
Создайте функцию read
Создайте функцию update
Создайте функцию delete
Используйте словарь pets, который будет предоставлен ниже, либо создайте свой аналогичный
Функция create:
Данная функция будет создавать новую запись с информацией о питомце и добавлять эту информацию в наш словарь pets
Функция read
Данная функция будет отображать информацию о запрашиваемом питомце в виде: 
Это желторотый питон по кличке "Каа". Возраст питомца: 19 лет. Имя владельца: Саша
Функция update
Данная функция будет обновлять информацию об указанном питомце
Данная функция будет удалять запись о существующем питомцеФункция delete


Структруа результирующего словаря pets будет как и в Урок №10. Задание №1, но с небольшим видоизменением: 
Словарь pets
pets = {
    1:
        {
            "Мухтар": {
                "Вид питомца": "Собака",
                "Возраст питомца": 9,
                "Имя владельца": "Павел"
            },
        },
    2:
        {
            "Каа": {
                "Вид питомца": "желторотый питон",
                "Возраст питомца": 19,
                "Имя владельца": "Саша"
            },
        },
    # и так далее
}
Здесь, 1 и 2 - это идентификаторы наших питомцев. Это уникальные ключи, по которым мы сможем обращаться к нашим записям в "базе данных"
Суть будущей программы будет заключаться в следующем:
Программа будет работать с помощью цикла while с условием command != 'stop', то есть до тех пор, пока на предложение ввести команду, пользователь не введёт слово stop
Перед взаимодействием с "базой данных" запрашивается одна из команд в качестве пользовательского ввода. Пусть это будет переменная command
Функция create должна добавлять новую информацию таким образом, чтобы идентификатор увеличивался на единицу. 
Чтобы у вас была возможность получать последний ключ в словаре воспользуйтесь импортом модуля collections. 
В начале вашей программы пропишите строчку: import collection, а в функции create в первых строках пропишите следующий код: 

def create():
  last = collections.deque(pets, maxlen=1)[0]
last в данном случае и будет число последнего ключа (или в нашей логике - идентификатора записи). 
Именно его и необходимо будет увеличивать на единицу при добавлении следующей записи.
Как вам уже известно - суть функций заключается в том, чтобы использовать один и тот же код в нескольких местах. 
В данной задаче вам предстоит получать информацию о питомце несколько раз. Чтобы не повторяться в коде, вам нужно создать такие функции 
get_pet(ID):
def get_pet(ID):
  # функция, с помощью которой вы получите информацию о питомце в виде словаря
  # сделайте проверку, если питомца с таким ID нету в нашей "базе данных"
  # верните в этом случае False
  # а если питомец всё же есть в "базе данных" - верните информацию о нём
  # выглядеть это может примерно так:
  return pets[ID] if ID in pets.keys() else False
get_suffix(age):
def get_suffix(age):
  # функция, с помощью которой можно получить суффикс
  # 'год', 'года', 'лет'
  # реализацию этой функции вам предстоит придумать самостоятельно
  # функция будет возвращать соответствующую строку
  return
pets_list():
def pets_list():
  # Эта функция будет создана для удобства отображения всего списка питомцев
  # Информацию по каждому питомцу можно вывести с помощью цикла for
Обратите внимание, если ID не существует в словаре с питомцами - будет возникать ошибка. Вам можно от неё избавиться, если правильно составить проверочное условие. 
Здесь не потребуется использовать такие конструкции, как try, except, чтобы обработать возникшую ошибку


"""

import collections

pets = {
        1:
            {
                "Мухтар": {
                    "Вид питомца": "Собака",
                    "Возраст питомца": 9,
                    "Имя владельца": "Павел"
                },
            },
        2:
            {
                "Каа": {
                    "Вид питомца": "желторотый питон",
                    "Возраст питомца": 21,
                    "Имя владельца": "Саша"
                },
            }, 
        }

def create():
    #  Данная функция будет создавать новую запись с информацией о питомце и добавлять эту информацию в наш словарь pets
    last = collections.deque(pets, maxlen=1)[0]
    name = input("Имя питомца: ")
    age = int(input("Введите возраст питомца: "))
    name_h = input("Введите имя хозяина: ")
    view_pets = input("Введите вид вашего питомца: ")

    pets[last + 1] = {
                    name : {
                            "Вид питомца" : view_pets,
                            "Возраст питомца" : age,
                            "Имя владельца" : name_h
                            }
                    }

def read():
    #  Данная функция будет отображать информацию о запрашиваемом питомце в виде:  Это желторотый питон по кличке "Каа". Возраст питомца: 19 лет. Имя владельца: Саша
    quest_pet = input("Введите имя питомца: ")
    for k, v in pets.items():
        for b, n in pets[k].items():
            if b == quest_pet:
                print(f'Это {n["Вид питомца"]} по кличке {b}. Возрастом {n["Возраст питомца"]} {get_suffix(int(n["Возраст питомца"]))}. Имя владельца: {n["Имя владельца"]}')

def update():
    #  Данная функция будет обновлять информацию об указанном питомце
    name_pet_update = input("Введите имя питомца у которого хотите поменять информацию?: ".lower())
    for k, v in pets.items():
        for b, n in pets[k].items():
            if b == name_pet_update:
                name_pet_o = input("Введите какой параметр хотите поменять? возраст, вид, владельца: ")

                if name_pet_o == "возраст":
                    age_new = int(input("Введите новое значение возраста: "))
                    pets[k][b]["Возраст питомца"] = age_new

                if name_pet_o == "вид":
                    view_new = input("Введите новое значение вида: ")
                    pets[k][b]["Вид питомца"] = view_new

                if name_pet_o == "влдельца":
                    name_new = input("Введите новое значение имени владельца: ")
                    pets[k][b]["Имя владельца"] = name_new

def delete():
    #  Данная функция будет удалять запись о существующем питомце
    name_del_pet = input("Введите имя питомца которого хотите удалить из базы: ")
    pets.pop(get_id(name_del_pet), None)

def get_id(name):
    #  возвращает ключь записи ищет по имени 
    for k in pets.keys():
        for b, l in pets[k].items():
            if b.lower() == name.lower():
                return k 

def pets_list():
    #  выводит информацию о всех питомцах в базе
    for k, v in pets.items():
        for b, n in pets[k].items():
            print(f"id: {k}")
            print(f"имя питомца {b}")
            print(pets[k][b])

def get_pet(id):
    for k in pets.keys():
        if k == id:
            print(pets[k])
        return False

def get_suffix(age_pet):
    #  функция, с помощью которой можно получить суффикс
    #  'год', 'года', 'лет'
    name_lear = ['лет', 'год', 'года']
    advance = age_pet % 10
    if age_pet == 0 or advance == 0 or advance >= 5 or age_pet in range(11,19):
        return name_lear[0]
    elif advance == 1:
        return name_lear[1]
    else:
        return name_lear[2]


command = input("Введите команду: ")
while command != "stop":
    if command == 'create':
        print(create())

    if command == "read":
        read()

    if command == "update":
        update()

    if command == "delete":
        delete()

    if command == "pets list":
        pets_list()

    command = input("Введите команду: ")











